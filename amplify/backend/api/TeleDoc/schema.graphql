enum Service {
  VIDEO
  CONSULTATION
  HOME
}

type Payement @model @auth(rules: [{allow: public}]) {
  id: ID!
  amount: Int
  payement_proof: String
  status: Status
  consultantID: ID! @index(name: "byConsultant")
  patientID: ID! @index(name: "byPatient")
}

type Appointement @model @auth(rules: [{allow: public}]) {
  id: ID!
  time: AWSTime
  date: AWSDate
  status: Status
  amount: Int
  Payement: Payement @hasOne
  consultantID: ID! @index(name: "byConsultant")
  patientID: ID! @index(name: "byPatient")
  service: Service
}

type Certificate @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: Certificates
  color: String
  consultants: [Consultant] @manyToMany(relationName: "ConsultantCertificate")
}

enum Certificates {
  DIALISE
  DIABETE
  ZICOMATI
  CHKOPOLOGIE
  KARAONI
  NICOLOGIE
}

enum Status {
  ACTIVE
  INACTIVE
  VALIDATING
  DISABLED
}

type Review @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  score: Int
  consultantID: ID! @index(name: "byConsultant")
  patientID: ID! @index(name: "byPatient")
}

enum Speciality {
  GENERALISTE
  PEDIATRE
  GENICOLOGUE
  CARDIOLOGUE
  DERMATOLOGUE
  PSYCHIATRE
  ORTHOPEDISTE
  OPHTALMOLOGUE
  ORL
  NEUROLOGUE
  RADIOLOGUE
  ANESTHESIOLOGUE
  NEPHROLOGUE
  PNEUMOLOGUE
  HEMATOLOGUE
  ONCOLOGUE
  ENDOCRINOLOGUE
  GASTROLOGUE
  RHUMATOLOGUE
  REEDUCATIONISTE
  EUROLOGUE
  NEURO_CHIRURGIEN
  INFECTIOLOGUE
}

type Consultant @model @auth(rules: [{allow: public}]) {
  id: ID!
  full_name: String
  email: AWSEmail
  sub: String
  mobile: String
  address: String
  lat: Float
  lng: Float
  picture: String
  speciality: Speciality
  score: Float
  diplome: String
  nbr_patient: Int
  descreprtion: String
  status: Status
  Reviews: [Review] @hasMany(indexName: "byConsultant", fields: ["id"])
  patients: [Patient] @manyToMany(relationName: "PatientConsultant")
  cost: Int
  experience: Int
  working_time: String
  working_day: String
  Certificates: [Certificate] @manyToMany(relationName: "ConsultantCertificate")
  Payements: [Payement] @hasMany(indexName: "byConsultant", fields: ["id"])
  Appointements: [Appointement] @hasMany(indexName: "byConsultant", fields: ["id"])
}

enum Gender {
  MALE
  FEMALE
}

type Patient @model @auth(rules: [{allow: public}]) {
  id: ID!
  email: AWSEmail!
  sub: String!
  gender: Gender
  mobile: String
  date_of_birth: AWSDate
  lat: Float
  lng: Float
  full_name: String
  address: String
  picture: String
  username: String
  Reviews: [Review] @hasMany(indexName: "byPatient", fields: ["id"])
  Consultants: [Consultant] @manyToMany(relationName: "PatientConsultant")
  status: Status
  Payements: [Payement] @hasMany(indexName: "byPatient", fields: ["id"])
  Appointements: [Appointement] @hasMany(indexName: "byPatient", fields: ["id"])
}
 